// –ò–º–ø–æ—Ä—Ç Wails runtime
import { Get } from '@wails/runtime';

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±—ç–∫–µ–Ω–¥–∞
let backend;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±—ç–∫–µ–Ω–¥ –∏–∑ Wails
        backend = await Get('backend.App');
        await refreshTasks();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
});

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    form: document.getElementById('addForm'),
    title: document.getElementById('title'),
    due: document.getElementById('due'),
    priority: document.getElementById('priority'),
    filter: document.getElementById('filter'),
    sort: document.getElementById('sort'),
    container: document.getElementById('tasksContainer'),
    themeBtn: document.getElementById('themeBtn')
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
elements.form.addEventListener('submit', handleAddTask);
elements.filter.addEventListener('change', refreshTasks);
elements.sort.addEventListener('change', refreshTasks);
elements.themeBtn.addEventListener('click', toggleTheme);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async function handleAddTask(e) {
    e.preventDefault();

    const title = elements.title.value.trim();
    if (!title) {
        showError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
        return;
    }

    try {
        const dueISO = elements.due.value ? new Date(elements.due.value).toISOString() : null;
        await backend.UC.Add(title, dueISO, elements.priority.value);

        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        elements.title.value = '';
        elements.due.value = '';
        elements.priority.value = 'medium';

        await refreshTasks();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
        showError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
async function toggleTask(id) {
    try {
        await backend.UC.ToggleDone(id);
        await refreshTasks();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async function deleteTask(id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
        try {
            await backend.UC.Delete(id);
            await refreshTasks();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
            showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
async function refreshTasks() {
    try {
        elements.container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

        const tasks = await backend.UC.List(elements.filter.value, elements.sort.value);

        if (tasks.length === 0) {
            elements.container.innerHTML = '<div class="loading">–ù–µ—Ç –∑–∞–¥–∞—á</div>';
            return;
        }

        // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        const activeTasks = tasks.filter(task => !task.done);
        const doneTasks = tasks.filter(task => task.done);

        let html = '';

        // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if (activeTasks.length > 0 && elements.filter.value !== 'done') {
            html += '<div class="task-section">';
            html += '<h3>üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</h3>';
            html += '<ul class="task-list">';
            activeTasks.forEach(task => {
                html += createTaskHTML(task);
            });
            html += '</ul></div>';
        }

        // –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if (doneTasks.length > 0 && elements.filter.value !== 'active') {
            html += '<div class="task-section">';
            html += '<h3>‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</h3>';
            html += '<ul class="task-list">';
            doneTasks.forEach(task => {
                html += createTaskHTML(task);
            });
            html += '</ul></div>';
        }

        elements.container.innerHTML = html;

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        addEventListeners();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –∑–∞–¥–∞—á–∏
function createTaskHTML(task) {
    const dueDate = task.dueAt ? new Date(task.dueAt).toLocaleString('ru-RU') : '';
    const priorityClass = task.priority.toLowerCase();
    const priorityText = {
        'high': 'üî¥ –í—ã—Å–æ–∫–∏–π',
        'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
        'low': 'üü¢ –ù–∏–∑–∫–∏–π'
    }[task.priority] || task.priority;

    return `
        <li class="task-item ${task.done ? 'done' : ''} priority-${priorityClass}">
            <input type="checkbox" 
                   class="task-checkbox" 
                   ${task.done ? 'checked' : ''} 
                   onchange="toggleTask('${task.id}')">
            <div class="task-content">
                <div class="task-title ${task.done ? 'done' : ''}">${escapeHtml(task.title)}</div>
                <div class="task-meta">
                    <span class="task-priority ${priorityClass}">${priorityText}</span>
                    ${dueDate ? `<span class="task-due">üìÖ ${dueDate}</span>` : ''}
                </div>
            </div>
            <div class="task-actions">
                <button class="delete-btn" onclick="deleteTask('${task.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        </li>
    `;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function addEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ onclick –≤ HTML
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
function toggleTheme() {
    document.body.classList.toggle('dark');
    const isDark = document.body.classList.contains('dark');
    elements.themeBtn.textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã
function loadTheme() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.body.classList.add('dark');
        elements.themeBtn.textContent = '‚òÄÔ∏è';
    }
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(message) {
    elements.container.innerHTML = `<div class="loading" style="color: #e74c3c;">‚ùå ${message}</div>`;
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
loadTheme();
